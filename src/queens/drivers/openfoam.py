# File: src/queens/drivers/openfoam.py
"""
OpenFOAM driver that properly integrates data processors with QUEENS.

This driver correctly passes the case directory to data processors,
enabling proper post-processing of simulation results.
"""

import re
import logging
from pathlib import Path

from queens.drivers.jobscript import Jobscript
from queens.utils.logger_settings import log_init_args

_logger = logging.getLogger(__name__)

_JOBSCRIPT_TEMPLATE_CONTAINER = """
#!/bin/bash
# OpenFOAM container execution script generated by QUEENS

cd "{{ case_dir }}"

{{ container_command }} -- bash -c "
    source {{ openfoam_bashrc }}
    
    if [ -f 'system/blockMeshDict' ]; then
        echo 'Generating mesh...'
        blockMesh
    fi
    
    if {{ check_mesh }}; then
        echo 'Checking mesh...'
        checkMesh
    fi
    
    {% if parallel and num_procs > 1 %}
    if [ -f 'system/decomposeParDict' ]; then
        decomposePar
    fi
    mpirun -np {{ num_procs }} {{ solver }} -parallel > {{ log_file }} 2>&1
    if [ -f 'system/decomposeParDict' ]; then
        reconstructPar
    fi
    {% else %}
    {{ solver }} > {{ log_file }} 2>&1
    {% endif %}
    
    echo 'OpenFOAM simulation completed!'
"
"""

_JOBSCRIPT_TEMPLATE_NATIVE = """
#!/bin/bash
# OpenFOAM native execution script generated by QUEENS

source {{ openfoam_bashrc }}
cd "{{ case_dir }}"

if [ -f "system/blockMeshDict" ]; then
    echo "Generating mesh..."
    blockMesh
fi

if {{ check_mesh }}; then
    echo "Checking mesh..."
    checkMesh
fi

{% if parallel and num_procs > 1 %}
if [ -f "system/decomposeParDict" ]; then
    decomposePar
fi
mpirun -np {{ num_procs }} {{ solver }} -parallel > {{ log_file }} 2>&1
if [ -f "system/decomposeParDict" ]; then
    reconstructPar
fi
{% else %}
{{ solver }} > {{ log_file }} 2>&1
{% endif %}

echo "OpenFOAM simulation completed!"
"""


class OpenFoam(Jobscript):
    """OpenFOAM driver with proper data processor integration."""

    @log_init_args
    def __init__(
        self,
        parameters,
        case_template_dir,
        solver="simpleFoam",
        parallel=False,
        num_procs=1,
        container_command=None,
        openfoam_bashrc="/opt/openfoam9/etc/bashrc",
        check_mesh=True,
        files_to_copy=None,
        data_processor=None,
        gradient_data_processor=None,
    ):
        """Initialize OpenFoam driver."""
        # Store case template path for later use
        self.case_template_dir = Path(case_template_dir)
        
        # Select template based on execution mode
        if container_command:
            jobscript_template = _JOBSCRIPT_TEMPLATE_CONTAINER
        else:
            jobscript_template = _JOBSCRIPT_TEMPLATE_NATIVE

        # Set up input templates from case template directory
        input_templates = self._setup_input_templates(case_template_dir)

        # Configure extra options for template rendering
        extra_options = {
            "solver": solver,
            "parallel": parallel,
            "num_procs": num_procs,
            "container_command": container_command or "",
            "openfoam_bashrc": openfoam_bashrc,
            "check_mesh": "true" if check_mesh else "false",
            "log_file": f"log.{solver}"
        }

        # Only copy user-specified files - static files handled in run()
        super().__init__(
            parameters=parameters,
            input_templates=input_templates,
            jobscript_template=jobscript_template,
            executable=solver,
            files_to_copy=files_to_copy or [],
            data_processor=data_processor,
            gradient_data_processor=gradient_data_processor,
            extra_options=extra_options,
        )

    def run(self, sample, job_id, num_procs, experiment_dir, experiment_name):
        """Override run to copy static files and set correct case directory."""
        # Get job directory path  
        job_dir = experiment_dir / str(job_id)
        
        # Copy static files to this specific job directory
        self._copy_static_files_to_job_dir(job_dir)
        
        # Update jobscript options with the correct case directory
        # Store original case_dir to restore later
        original_case_dir = self.jobscript_options.get("case_dir")
        
        # Set case_dir to the absolute path of the job directory
        self.jobscript_options["case_dir"] = str(job_dir)
        
        try:
            # Call parent run method
            result = super().run(sample, job_id, num_procs, experiment_dir, experiment_name)
            return result
        finally:
            # Restore original case_dir
            if original_case_dir is not None:
                self.jobscript_options["case_dir"] = original_case_dir

    def _get_results(self, output_dir):
        """Override to pass the correct directory to data processors.
        
        The parent class passes output_dir (job_dir/output/) to data processors,
        but OpenFOAM data processors need the case directory (job_dir/).
        
        Args:
            output_dir (Path): Path to output directory (job_dir/output/)
            
        Returns:
            result (np.array): Result from the driver run.
            gradient (np.array, None): Gradient from the driver run (potentially None).
        """
        result = None
        gradient = None
        
        # Get the case directory (parent of output_dir)
        case_dir = output_dir.parent
        
        if self.data_processor:
            # Pass case_dir instead of output_dir for OpenFOAM data processors
            result = self.data_processor.get_data_from_file(case_dir)
            _logger.debug("Got result from case_dir %s: %s", case_dir, result)

        if self.gradient_data_processor:
            # Pass case_dir instead of output_dir for OpenFOAM gradient processors
            gradient = self.gradient_data_processor.get_data_from_file(case_dir)
            _logger.debug("Got gradient from case_dir %s: %s", case_dir, gradient)
            
        return result, gradient

    def _copy_static_files_to_job_dir(self, job_dir):
        """Copy all non-template files to the job directory."""
        import shutil
        
        if not self.case_template_dir.exists():
            return
        
        # Copy all non-template files while preserving directory structure
        for item in self.case_template_dir.rglob("*"):
            if item.is_file() and item.suffix != ".template":
                # Get relative path from template directory
                relative_path = item.relative_to(self.case_template_dir)
                
                # Target path in job directory
                target_path = job_dir / relative_path
                
                # Create parent directories if needed
                target_path.parent.mkdir(parents=True, exist_ok=True)
                
                # Copy the file
                shutil.copy2(item, target_path)

    def _setup_input_templates(self, case_template_dir):
        """Set up input templates from case template directory."""
        case_path = Path(case_template_dir)
        input_templates = {}
        
        if not case_path.exists():
            raise FileNotFoundError(f"Case template directory not found: {case_template_dir}")
        
        # Find all .template files recursively
        template_files = list(case_path.rglob("*.template"))
        
        for template_file in template_files:
            relative_path = template_file.relative_to(case_path)
            
            # Remove .template extension for output filename
            output_relative_path = relative_path.with_suffix('')
            
            # Use the relative path as template key to maintain directory structure
            # but replace path separators with underscores for the key
            template_key = str(output_relative_path).replace("/", "_").replace("\\", "_")
            
            input_templates[template_key] = str(template_file)
        
        return input_templates

    def _manage_paths(self, job_id, experiment_dir):
        """Override to properly handle OpenFOAM directory structure.
        
        Args:
            job_id (int): Job ID.
            experiment_dir (Path): Path to QUEENS experiment directory.

        Returns:
            job_dir (Path): Path to job directory.
            output_dir (Path): Path to output directory.
            output_file (Path): Path to output file(s).
            input_files (dict): Dict with name and path of the input file(s).
            log_file (Path): Path to log file.
        """
        job_dir = experiment_dir / str(job_id)
        output_dir = job_dir / "output"
        output_dir.mkdir(parents=True, exist_ok=True)

        output_prefix = "output"
        output_file = output_dir / output_prefix
        log_file = output_dir / (output_prefix + ".log")

        input_files = {}
        for input_template_name, input_template_path in self.input_templates.items():
            # For OpenFOAM, convert the template key back to proper path structure
            # Convert "0_p" -> "0/p", "system_controlDict" -> "system/controlDict"
            if "_" in input_template_name:
                # Convert underscores back to path separators
                relative_output_path = input_template_name.replace("_", "/")
            else:
                relative_output_path = input_template_name
                
            # Create full path for the output file
            output_file_path = job_dir / relative_output_path
            
            # Ensure the directory exists
            output_file_path.parent.mkdir(parents=True, exist_ok=True)
            
            input_files[input_template_name] = output_file_path

        return job_dir, output_dir, output_file, input_files, log_file