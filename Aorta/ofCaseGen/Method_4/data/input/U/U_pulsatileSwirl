/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    inlet
    {
        type            codedFixedValue;
        value           uniform (0 0 0);
        name            pulsatileSwirl;

        code
        #{
            const scalar t = this->db().time().value();
            const vectorField& centres = patch().Cf();
            const vector axisPoint(0, 0, 0);
            const vector axisDirection(0, 0, 1);
            
            // Define the pulsatile profile data
            static const List<Tuple2<scalar, vector>> profileData({

                {0.0236, vector(0.0001, 0.0014, 0.0000)},
                {0.0359, vector(0.0011, 0.0205, 0.0000)},
                {0.0449, vector(0.0032, 0.0574, 0.0000)},
                {0.0504, vector(0.0050, 0.0900, 0.0000)},
                {0.0544, vector(0.0065, 0.1168, 0.0000)},
                {0.0577, vector(0.0082, 0.1482, 0.0000)},
                {0.0601, vector(0.0096, 0.1730, 0.0000)},
                {0.0644, vector(0.0110, 0.1987, 0.0000)},
                {0.0671, vector(0.0125, 0.2253, 0.0000)},
                {0.0729, vector(0.0143, 0.2570, 0.0000)},
                {0.0816, vector(0.0160, 0.2875, 0.0000)},
                {0.0886, vector(0.0176, 0.3174, 0.0000)},
                {0.0946, vector(0.0190, 0.3430, 0.0000)},
                {0.1018, vector(0.0206, 0.3720, 0.0000)},
                {0.1090, vector(0.0221, 0.3976, 0.0000)},
                {0.1184, vector(0.0235, 0.4238, 0.0000)},
                {0.1375, vector(0.0250, 0.4500, 0.0000)},
                {0.1673, vector(0.0242, 0.4354, 0.0000)},
                {0.1800, vector(0.0232, 0.4184, 0.0000)},
                {0.1945, vector(0.0220, 0.3960, 0.0000)},
                {0.2077, vector(0.0206, 0.3718, 0.0000)},
                {0.2186, vector(0.0194, 0.3499, 0.0000)},
                {0.2282, vector(0.0182, 0.3287, 0.0000)},
                {0.2378, vector(0.0170, 0.3069, 0.0000)},
                {0.2477, vector(0.0154, 0.2779, 0.0000)},
                {0.2631, vector(0.0137, 0.2467, 0.0000)},
                {0.2701, vector(0.0125, 0.2254, 0.0000)},
                {0.2817, vector(0.0108, 0.1947, 0.0000)},
                {0.2920, vector(0.0091, 0.1639, 0.0000)},
                {0.2992, vector(0.0075, 0.1358, 0.0000)},
                {0.3064, vector(0.0060, 0.1086, 0.0000)},
                {0.3137, vector(0.0045, 0.0805, 0.0000)},
                {0.3209, vector(0.0029, 0.0530, 0.0000)},
                {0.3269, vector(0.0017, 0.0313, 0.0000)},
                {0.3373, vector(0.0001, 0.0020, 0.0000)},
                {0.3474, vector(-0.0019, -0.0347, -0.0000)},
                {0.3546, vector(-0.0032, -0.0576, -0.0000)},
                {0.3618, vector(-0.0045, -0.0808, -0.0000)},
                {0.3702, vector(-0.0059, -0.1068, -0.0000)},
                {0.3816, vector(-0.0073, -0.1320, -0.0000)},
                {0.3989, vector(-0.0084, -0.1515, -0.0000)},
                {0.4316, vector(-0.0080, -0.1438, -0.0000)},
                {0.4594, vector(-0.0073, -0.1311, -0.0000)},
                {0.4822, vector(-0.0064, -0.1150, -0.0000)},
                {0.5075, vector(-0.0052, -0.0946, -0.0000)},
                {0.5303, vector(-0.0041, -0.0742, -0.0000)},
                {0.5532, vector(-0.0030, -0.0532, -0.0000)},
                {0.5785, vector(-0.0017, -0.0311, -0.0000)},
                {0.6050, vector(-0.0005, -0.0095, -0.0000)},
                {0.6275, vector(0.0004, 0.0069, 0.0000)},
                {0.6580, vector(0.0013, 0.0238, 0.0000)},
                {0.6854, vector(0.0016, 0.0285, 0.0000)},
                {0.7109, vector(0.0015, 0.0267, 0.0000)},
                {0.7374, vector(0.0014, 0.0255, 0.0000)},
                {0.7639, vector(0.0012, 0.0212, 0.0000)},
                {0.7904, vector(0.0009, 0.0161, 0.0000)},
                {0.8169, vector(0.0006, 0.0099, 0.0000)},
                {0.8482, vector(0.0002, 0.0034, 0.0000)},
                {0.8746, vector(-0.0002, -0.0028, -0.0000)},
                {0.9011, vector(-0.0002, -0.0043, -0.0000)},
                {0.9276, vector(-0.0002, -0.0044, -0.0000)},
                {0.9513, vector(0.0001, 0.0014, 0.0000)},
                {0.9749, vector(0.0001, 0.0014, 0.0000)},
                {0.9872, vector(0.0011, 0.0205, 0.0000)},
                {0.9962, vector(0.0032, 0.0574, 0.0000)},
                {1.0017, vector(0.0050, 0.0900, 0.0000)},
                {1.0057, vector(0.0065, 0.1168, 0.0000)},
                {1.0090, vector(0.0082, 0.1482, 0.0000)},
                {1.0114, vector(0.0096, 0.1730, 0.0000)},
                {1.0157, vector(0.0110, 0.1987, 0.0000)},
                {1.0184, vector(0.0125, 0.2253, 0.0000)},
                {1.0242, vector(0.0143, 0.2570, 0.0000)},
                {1.0329, vector(0.0160, 0.2875, 0.0000)},
                {1.0398, vector(0.0176, 0.3174, 0.0000)},
                {1.0459, vector(0.0190, 0.3430, 0.0000)},
                {1.0531, vector(0.0206, 0.3720, 0.0000)},
                {1.0603, vector(0.0221, 0.3976, 0.0000)},
                {1.0697, vector(0.0235, 0.4238, 0.0000)},
                {1.0888, vector(0.0250, 0.4500, 0.0000)},
                {1.1186, vector(0.0242, 0.4354, 0.0000)},
                {1.1313, vector(0.0232, 0.4184, 0.0000)},
                {1.1458, vector(0.0220, 0.3960, 0.0000)},
                {1.1590, vector(0.0206, 0.3718, 0.0000)},
                {1.1699, vector(0.0194, 0.3499, 0.0000)},
                {1.1795, vector(0.0182, 0.3287, 0.0000)},
                {1.1891, vector(0.0170, 0.3069, 0.0000)},
                {1.1990, vector(0.0154, 0.2779, 0.0000)},
                {1.2144, vector(0.0137, 0.2467, 0.0000)},
                {1.2214, vector(0.0125, 0.2254, 0.0000)},
                {1.2330, vector(0.0108, 0.1947, 0.0000)},
                {1.2433, vector(0.0091, 0.1639, 0.0000)},
                {1.2505, vector(0.0075, 0.1358, 0.0000)},
                {1.2577, vector(0.0060, 0.1086, 0.0000)},
                {1.2650, vector(0.0045, 0.0805, 0.0000)},
                {1.2722, vector(0.0029, 0.0530, 0.0000)},
                {1.2782, vector(0.0017, 0.0313, 0.0000)},
                {1.2886, vector(0.0001, 0.0020, 0.0000)},
                {1.2987, vector(-0.0019, -0.0347, -0.0000)},
                {1.3059, vector(-0.0032, -0.0576, -0.0000)},
                {1.3131, vector(-0.0045, -0.0808, -0.0000)},
                {1.3215, vector(-0.0059, -0.1068, -0.0000)},
                {1.3329, vector(-0.0073, -0.1320, -0.0000)},
                {1.3502, vector(-0.0084, -0.1515, -0.0000)},
                {1.3829, vector(-0.0080, -0.1438, -0.0000)},
                {1.4107, vector(-0.0073, -0.1311, -0.0000)},
                {1.4335, vector(-0.0064, -0.1150, -0.0000)},
                {1.4588, vector(-0.0052, -0.0946, -0.0000)},
                {1.4816, vector(-0.0041, -0.0742, -0.0000)},
                {1.5045, vector(-0.0030, -0.0532, -0.0000)},
                {1.5298, vector(-0.0017, -0.0311, -0.0000)},
                {1.5563, vector(-0.0005, -0.0095, -0.0000)},
                {1.5788, vector(0.0004, 0.0069, 0.0000)},
                {1.6093, vector(0.0013, 0.0238, 0.0000)},
                {1.6367, vector(0.0016, 0.0285, 0.0000)},
                {1.6622, vector(0.0015, 0.0267, 0.0000)},
                {1.6887, vector(0.0014, 0.0255, 0.0000)},
                {1.7152, vector(0.0012, 0.0212, 0.0000)},
                {1.7417, vector(0.0009, 0.0161, 0.0000)},
                {1.7682, vector(0.0006, 0.0099, 0.0000)},
                {1.7995, vector(0.0002, 0.0034, 0.0000)},
                {1.8259, vector(-0.0002, -0.0028, -0.0000)},
                {1.8524, vector(-0.0002, -0.0043, -0.0000)},
                {1.8789, vector(-0.0002, -0.0044, -0.0000)},
                {1.9026, vector(0.0001, 0.0014, 0.0000)}

            });
            
            // Interpolate pulsatile velocity
            vector pulsatileVelocity(0, 0, 0);
            scalar t_mod = fmod(t, profileData.last().first());
            
            for (label i = 0; i < profileData.size() - 1; i++)
            {
                if (t_mod >= profileData[i].first() && t_mod < profileData[i+1].first())
                {
                    scalar alpha = (t_mod - profileData[i].first()) / 
                                   (profileData[i+1].first() - profileData[i].first());
                    pulsatileVelocity = (1 - alpha) * profileData[i].second() + 
                                        alpha * profileData[i+1].second();
                    break;
                }
            }
            
            // Add swirl component
            scalar swirlStrength = 0.1; // Adjust this value to control swirl intensity
            vectorField swirl = swirlStrength * ((centres - axisPoint) ^ axisDirection);
            
            // Combine pulsatile and swirl components
            operator==(pulsatileVelocity + swirl);
        #};
    }

    outlet
    {
        type        inletOutlet;
        inletValue  uniform (0 0 0);
        value       $internalField;
    }

    wall
    {
        type        noSlip;
    }
}

// ************************************************************************* //