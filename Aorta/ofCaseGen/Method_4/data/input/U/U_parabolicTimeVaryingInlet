/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  9.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0]; 	// [kg m s ... ]

internalField   uniform (0 0 0);

boundaryField
{

inlet
{
    type            codedFixedValue;
    value           uniform (0 0 0);
    name            parabolicTimeVaryingInlet;
    
    code
    #{
        // Get the current time
        scalar t = this->db().time().value();
        
        // Get patch and mesh information
        const fvPatch& boundaryPatch = patch();
        const vectorField& Cf = boundaryPatch.Cf();
        
        // Get patch normal direction (average of face normals)
        vector n = gAverage(boundaryPatch.nf());
        
        // Calculate center of the inlet
        point center = gAverage(Cf);
        
        // Calculate maximum radius (distance from center to farthest point)
        scalar R = 0.0;
        forAll(Cf, faceI)
        {
            vector distVector = Cf[faceI] - center;
            vector radialVector = distVector - (distVector & n)*n;
            scalar r = mag(radialVector);
            R = max(R, r);
        }
        
        // Define time points and corresponding velocity components
        // Using dynamic construction of arrays to avoid initialization issues
        label numPoints = 254;  // Number of time points in the data
        
        scalarField timePoints(numPoints);
        scalarField velocities(numPoints);
        scalarField xComponents(numPoints);
        
        // Define array values
        // Time points
        scalar timeData[] = {
            0.0236, 0.0359, 0.0449, 0.0504, 0.0544, 0.0577, 0.0601, 0.0644, 0.0671, 0.0729, 
            0.0816, 0.0886, 0.0946, 0.1018, 0.1090, 0.1184, 0.1375, 0.1673, 0.1800, 0.1945, 
            0.2077, 0.2186, 0.2282, 0.2378, 0.2477, 0.2631, 0.2701, 0.2817, 0.2920, 0.2992, 
            0.3064, 0.3137, 0.3209, 0.3269, 0.3373, 0.3474, 0.3546, 0.3618, 0.3702, 0.3816, 
            0.3989, 0.4316, 0.4594, 0.4822, 0.5075, 0.5303, 0.5532, 0.5785, 0.6050, 0.6275, 
            0.6580, 0.6854, 0.7109, 0.7374, 0.7639, 0.7904, 0.8169, 0.8482, 0.8746, 0.9011, 
            0.9276, 0.9513, 0.9749, 0.9872, 0.9962, 1.0017, 1.0057, 1.0090, 1.0114, 1.0157,
            1.0184, 1.0242, 1.0329, 1.0398, 1.0459, 1.0531, 1.0603, 1.0697, 1.0888, 1.1186,
            1.1313, 1.1458, 1.1590, 1.1699, 1.1795, 1.1891, 1.1990, 1.2144, 1.2214, 1.2330,
            1.2433, 1.2505, 1.2577, 1.2650, 1.2722, 1.2782, 1.2886, 1.2987, 1.3059, 1.3131,
            1.3215, 1.3329, 1.3502, 1.3829, 1.4107, 1.4335, 1.4588, 1.4816, 1.5045, 1.5298,
            1.5563, 1.5788, 1.6093, 1.6367, 1.6622, 1.6887, 1.7152, 1.7417, 1.7682, 1.7995,
            1.8259, 1.8524, 1.8789, 1.9026, 1.9262, 1.9385, 1.9475, 1.9530, 1.9570, 1.9603,
            1.9627, 1.9670, 1.9697, 1.9755, 1.9842, 1.9911, 1.9972, 2.0044, 2.0116, 2.0210,
            2.0401, 2.0699, 2.0826, 2.0971, 2.1103, 2.1212, 2.1308, 2.1404, 2.1503, 2.1657,
            2.1727, 2.1843, 2.1946, 2.2018, 2.2090, 2.2163, 2.2235, 2.2295, 2.2399, 2.2500,
            2.2572, 2.2644, 2.2728, 2.2842, 2.3015, 2.3342, 2.3620, 2.3848, 2.4101, 2.4329,
            2.4558, 2.4811, 2.5076, 2.5301, 2.5606, 2.5880, 2.6135, 2.6400, 2.6665, 2.6930,
            2.7195, 2.7508, 2.7772, 2.8037, 2.8302, 2.8539, 2.8775, 2.8898, 2.8988, 2.9043,
            2.9083, 2.9116, 2.9140, 2.9183, 2.9210, 2.9268, 2.9355, 2.9425, 2.9485, 2.9557,
            2.9629, 2.9723, 2.9914, 3.0212, 3.0339, 3.0484, 3.0616, 3.0725, 3.0821, 3.0917,
            3.1016, 3.1170, 3.1240, 3.1356, 3.1459, 3.1531, 3.1603, 3.1676, 3.1748, 3.1808,
            3.1912, 3.2013, 3.2085, 3.2157, 3.2241, 3.2355, 3.2528, 3.2855, 3.3133, 3.3361,
            3.3614, 3.3842, 3.4071, 3.4324, 3.4589, 3.4814, 3.5119, 3.5393, 3.5648, 3.5913,
            3.6178, 3.6443, 3.6708, 3.7021, 3.7285, 3.7550, 3.7815, 3.8052
        };
        
        // y-component of velocity
        scalar velocityData[] = {
            0.0014, 0.0205, 0.0575, 0.0901, 0.1169, 0.1483, 0.1732, 0.1988, 0.2254, 0.2572,
            0.2877, 0.3176, 0.3432, 0.3723, 0.3979, 0.4242, 0.4503, 0.4358, 0.4187, 0.3963,
            0.3721, 0.3501, 0.3289, 0.3072, 0.2781, 0.2469, 0.2255, 0.1948, 0.1641, 0.1359,
            0.1087, 0.0806, 0.0531, 0.0313, 0.0020, -0.0347, -0.0576, -0.0808, -0.1069, -0.1321,
            -0.1516, -0.1439, -0.1312, -0.1151, -0.0946, -0.0743, -0.0533, -0.0311, -0.0095, 0.0069,
            0.0238, 0.0285, 0.0267, 0.0255, 0.0212, 0.0161, 0.0100, 0.0034, -0.0028, -0.0043,
            -0.0044, 0.0014, 0.0014, 0.0205, 0.0575, 0.0901, 0.1169, 0.1483, 0.1732, 0.1988,
            0.2254, 0.2572, 0.2877, 0.3176, 0.3432, 0.3723, 0.3979, 0.4242, 0.4503, 0.4358,
            0.4187, 0.3963, 0.3721, 0.3501, 0.3289, 0.3072, 0.2781, 0.2469, 0.2255, 0.1948,
            0.1641, 0.1359, 0.1087, 0.0806, 0.0531, 0.0313, 0.0020, -0.0347, -0.0576, -0.0808,
            -0.1069, -0.1321, -0.1516, -0.1439, -0.1312, -0.1151, -0.0946, -0.0743, -0.0533, -0.0311,
            -0.0095, 0.0069, 0.0238, 0.0285, 0.0267, 0.0255, 0.0212, 0.0161, 0.0100, 0.0034,
            -0.0028, -0.0043, -0.0044, 0.0014, 0.0014, 0.0205, 0.0575, 0.0901, 0.1169, 0.1483,
            0.1732, 0.1988, 0.2254, 0.2572, 0.2877, 0.3176, 0.3432, 0.3723, 0.3979, 0.4242,
            0.4503, 0.4358, 0.4187, 0.3963, 0.3721, 0.3501, 0.3289, 0.3072, 0.2781, 0.2469,
            0.2255, 0.1948, 0.1641, 0.1359, 0.1087, 0.0806, 0.0531, 0.0313, 0.0020, -0.0347,
            -0.0576, -0.0808, -0.1069, -0.1321, -0.1516, -0.1439, -0.1312, -0.1151, -0.0946, -0.0743,
            -0.0533, -0.0311, -0.0095, 0.0069, 0.0238, 0.0285, 0.0267, 0.0255, 0.0212, 0.0161,
            0.0100, 0.0034, -0.0028, -0.0043, -0.0044, 0.0014, 0.0014, 0.0205, 0.0575, 0.0901,
            0.1169, 0.1483, 0.1732, 0.1988, 0.2254, 0.2572, 0.2877, 0.3176, 0.3432, 0.3723,
            0.3979, 0.4242, 0.4503, 0.4358, 0.4187, 0.3963, 0.3721, 0.3501, 0.3289, 0.3072,
            0.2781, 0.2469, 0.2255, 0.1948, 0.1641, 0.1359, 0.1087, 0.0806, 0.0531, 0.0313,
            0.0020, -0.0347, -0.0576, -0.0808, -0.1069, -0.1321, -0.1516, -0.1439, -0.1312, -0.1151,
            -0.0946, -0.0743, -0.0533, -0.0311, -0.0095, 0.0069, 0.0238, 0.0285, 0.0267, 0.0255,
            0.0212, 0.0161, 0.0100, 0.0034, -0.0028, -0.0043, -0.0044, 0.0014
        };
        
        // x-component of velocity
        scalar xComponentData[] = {
            -0.0001, -0.0008, -0.0023, -0.0036, -0.0047, -0.0059, -0.0069, -0.0079, -0.0090, -0.0103,
            -0.0115, -0.0127, -0.0137, -0.0149, -0.0159, -0.0169, -0.0180, -0.0174, -0.0167, -0.0158,
            -0.0149, -0.0140, -0.0131, -0.0123, -0.0111, -0.0099, -0.0090, -0.0078, -0.0065, -0.0054,
            -0.0043, -0.0032, -0.0021, -0.0012, -0.0001, 0.0014, 0.0023, 0.0032, 0.0043, 0.0053,
            0.0060, 0.0057, 0.0052, 0.0046, 0.0038, 0.0030, 0.0021, 0.0012, 0.0004, -0.0003,
            -0.0010, -0.0011, -0.0011, -0.0010, -0.0008, -0.0006, -0.0004, -0.0001, 0.0001, 0.0002,
            0.0002, -0.0001, -0.0001, -0.0008, -0.0023, -0.0036, -0.0047, -0.0059, -0.0069, -0.0079,
            -0.0090, -0.0103, -0.0115, -0.0127, -0.0137, -0.0149, -0.0159, -0.0169, -0.0180, -0.0174,
            -0.0167, -0.0158, -0.0149, -0.0140, -0.0131, -0.0123, -0.0111, -0.0099, -0.0090, -0.0078,
            -0.0065, -0.0054, -0.0043, -0.0032, -0.0021, -0.0012, -0.0001, 0.0014, 0.0023, 0.0032,
            0.0043, 0.0053, 0.0060, 0.0057, 0.0052, 0.0046, 0.0038, 0.0030, 0.0021, 0.0012,
            0.0004, -0.0003, -0.0010, -0.0011, -0.0011, -0.0010, -0.0008, -0.0006, -0.0004, -0.0001,
            0.0001, 0.0002, 0.0002, -0.0001, -0.0001, -0.0008, -0.0023, -0.0036, -0.0047, -0.0059,
            -0.0069, -0.0079, -0.0090, -0.0103, -0.0115, -0.0127, -0.0137, -0.0149, -0.0159, -0.0169,
            -0.0180, -0.0174, -0.0167, -0.0158, -0.0149, -0.0140, -0.0131, -0.0123, -0.0111, -0.0099,
            -0.0090, -0.0078, -0.0065, -0.0054, -0.0043, -0.0032, -0.0021, -0.0012, -0.0001, 0.0014,
            0.0023, 0.0032, 0.0043, 0.0053, 0.0060, 0.0057, 0.0052, 0.0046, 0.0038, 0.0030,
            0.0021, 0.0012, 0.0004, -0.0003, -0.0010, -0.0011, -0.0011, -0.0010, -0.0008, -0.0006,
            -0.0004, -0.0001, 0.0001, 0.0002, 0.0002, -0.0001, -0.0001, -0.0008, -0.0023, -0.0036,
            -0.0047, -0.0059, -0.0069, -0.0079, -0.0090, -0.0103, -0.0115, -0.0127, -0.0137, -0.0149,
            -0.0159, -0.0169, -0.0180, -0.0174, -0.0167, -0.0158, -0.0149, -0.0140, -0.0131, -0.0123,
            -0.0111, -0.0099, -0.0090, -0.0078, -0.0065, -0.0054, -0.0043, -0.0032, -0.0021, -0.0012,
            -0.0001, 0.0014, 0.0023, 0.0032, 0.0043, 0.0053, 0.0060, 0.0057, 0.0052, 0.0046,
            0.0038, 0.0030, 0.0021, 0.0012, 0.0004, -0.0003, -0.0010, -0.0011, -0.0011, -0.0010,
            -0.0008, -0.0006, -0.0004, -0.0001, 0.0001, 0.0002, 0.0002, -0.0001
        };
        
        // Copy data to scalarFields
        for (label i = 0; i < numPoints; i++)
        {
            timePoints[i] = timeData[i];
            velocities[i] = velocityData[i];
            xComponents[i] = xComponentData[i];
        }
        
        // Get period of the signal
        scalar period = timePoints.last() - timePoints.first();
        
        // Adjust time to be within the time range (handle cyclic behavior)
        scalar adjustedTime = fmod(t - timePoints.first(), period) + timePoints.first();
        
        // Find timeIndex where adjustedTime falls between timePoints[timeIndex] and timePoints[timeIndex+1]
        label timeIndex = 0;
        while (timeIndex < timePoints.size()-1 && adjustedTime > timePoints[timeIndex+1])
        {
            timeIndex++;
        }
        
        // If time is exactly at last time point or beyond, use the last value
        if (timeIndex >= timePoints.size()-1)
        {
            timeIndex = timePoints.size()-2;
        }
        
        // Interpolate between timeIndex and timeIndex+1
        scalar t0 = timePoints[timeIndex];
        scalar t1 = timePoints[timeIndex+1];
        scalar v0 = velocities[timeIndex];
        scalar v1 = velocities[timeIndex+1];
        scalar x0 = xComponents[timeIndex];
        scalar x1 = xComponents[timeIndex+1];
        
        // Linear interpolation of velocity and x-component
        scalar fraction = (adjustedTime - t0)/(t1 - t0);
        scalar centerVelocity = v0 + fraction * (v1 - v0);
        scalar centerXComponent = x0 + fraction * (x1 - x0);
        
        // Apply parabolic profile to each face
        vectorField& v = *this;
        
        forAll(Cf, faceI)
        {
            // Calculate radial distance from center
            vector distVector = Cf[faceI] - center;
            vector radialVector = distVector - (distVector & n)*n;
            scalar r = mag(radialVector);
            
            // Apply parabolic profile: v(r) = v_max * (1 - (r/R)^2)
            // This is for fully developed laminar pipe flow
            scalar profile = 1.0 - pow(r/R, 2);
            
            // Create velocity vector (using the original velocity components but with parabolic variation)
            scalar yVel = centerVelocity * profile;
            scalar xVel = centerXComponent * profile;
            scalar zVel = 0.0; // No z-component in your original data
            
            v[faceI] = vector(xVel, yVel, zVel);
        }
    #};
}

outlet
{
    type        inletOutlet;
    inletValue  uniform (0 0 0);
    value       $internalField;
}

wall
{
type        noSlip;
} 

}

// ************************************************************************* //